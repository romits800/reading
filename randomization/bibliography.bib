
@inproceedings{ahmed_methodologies_2020,
	address = {New York, NY, USA},
	series = {{CCS} '20},
	title = {Methodologies for {Quantifying} ({Re}-)randomization {Security} and {Timing} under {JIT}-{ROP}},
	isbn = {978-1-4503-7089-9},
	url = {http://doi.org/10.1145/3372297.3417248},
	doi = {10.1145/3372297.3417248},
	abstract = {Just-in-time return-oriented programming (JIT-ROP) allows one to dynamically discover instruction pages and launch code reuse attacks, effectively bypassing most fine-grained address space layout randomization (ASLR) protection. However, in-depth questions regarding the impact of code (re-)randomization on code reuse attacks have not been studied. For example, how would one compute the re-randomization interval effectively by considering the speed of gadget convergence to defeat JIT-ROP attacks? ; how do starting pointers in JIT-ROP impact gadget availability and gadget convergence time? ; what impact do fine-grained code randomizations have on the Turing-complete expressive power of JIT-ROP payloads? We conduct a comprehensive measurement study on the effectiveness of fine-grained code randomization schemes, with 5 tools, 20 applications including 6 browsers, 1 browser engine, and 25 dynamic libraries. We provide methodologies to measure JIT-ROP gadget availability, quality, and their Turing-complete expressiveness, as well as to empirically determine the upper bound of re-randomization intervals in re-randomization schemes using the Turing-complete (TC), priority, MOV TC, and payload gadget sets. Experiments show that the upper bound ranges from 1.5 to 3.5 seconds in our tested applications. Besides, our results show that locations of leaked pointers used in JIT-ROP attacks have no impacts on gadget availability but have an impact on how fast attackers find gadgets. Our results also show that instruction-level single-round randomization thwarts current gadget finding techniques under the JIT-ROP threat model.},
	urldate = {2021-09-07},
	booktitle = {Proceedings of the 2020 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Ahmed, Salman and Xiao, Ya and Snow, Kevin Z. and Tan, Gang and Monrose, Fabian and Yao, Danfeng (Daphne)},
	month = oct,
	year = {2020},
	keywords = {address/code pointer impact analysis, ASLR measurement, attack surface quantification, JITROP, measurement methodology, re-randomization interval, security metrics},
	pages = {1803--1820},
	file = {Full Text PDF:/home/romi/Zotero/storage/DNIBAENB/Ahmed et al. - 2020 - Methodologies for Quantifying (Re-)randomization S.pdf:application/pdf},
}
